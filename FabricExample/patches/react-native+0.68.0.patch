diff --git a/node_modules/react-native/React/Fabric/RCTScheduler.h b/node_modules/react-native/React/Fabric/RCTScheduler.h
index b201c0a..bebc5fd 100644
--- a/node_modules/react-native/React/Fabric/RCTScheduler.h
+++ b/node_modules/react-native/React/Fabric/RCTScheduler.h
@@ -10,11 +10,13 @@
 
 #import <react/renderer/componentregistry/ComponentDescriptorFactory.h>
 #import <react/renderer/core/ComponentDescriptor.h>
+#import <react/renderer/core/EventListener.h>
 #import <react/renderer/core/LayoutConstraints.h>
 #import <react/renderer/core/LayoutContext.h>
 #import <react/renderer/mounting/MountingCoordinator.h>
 #import <react/renderer/scheduler/SchedulerToolbox.h>
 #import <react/renderer/scheduler/SurfaceHandler.h>
+#import <react/renderer/uimanager/UIManager.h>
 #import <react/utils/ContextContainer.h>
 
 NS_ASSUME_NONNULL_BEGIN
@@ -47,6 +49,7 @@ NS_ASSUME_NONNULL_BEGIN
 @interface RCTScheduler : NSObject
 
 @property (atomic, weak, nullable) id<RCTSchedulerDelegate> delegate;
+@property (readonly) std::shared_ptr<facebook::react::UIManager> const uiManager;
 
 - (instancetype)initWithToolbox:(facebook::react::SchedulerToolbox)toolbox;
 
@@ -64,6 +67,10 @@ NS_ASSUME_NONNULL_BEGIN
 
 - (void)animationTick;
 
+- (void)addEventListener:(std::shared_ptr<facebook::react::EventListener> const &)listener;
+
+- (void)removeEventListener:(std::shared_ptr<facebook::react::EventListener> const &)listener;
+
 @end
 
 NS_ASSUME_NONNULL_END
diff --git a/node_modules/react-native/React/Fabric/RCTScheduler.mm b/node_modules/react-native/React/Fabric/RCTScheduler.mm
index 4bc19fd..8ba0b34 100644
--- a/node_modules/react-native/React/Fabric/RCTScheduler.mm
+++ b/node_modules/react-native/React/Fabric/RCTScheduler.mm
@@ -193,4 +193,19 @@ - (void)onAllAnimationsComplete
   }
 }
 
+- (void)addEventListener:(std::shared_ptr<EventListener> const &)listener
+{
+  return _scheduler->addEventListener(listener);
+}
+
+- (void)removeEventListener:(std::shared_ptr<EventListener> const &)listener
+{
+  return _scheduler->removeEventListener(listener);
+}
+
+- (std::shared_ptr<facebook::react::UIManager> const)uiManager
+{
+  return _scheduler->getUIManager();
+}
+
 @end
diff --git a/node_modules/react-native/React/Fabric/RCTSurfacePresenter.h b/node_modules/react-native/React/Fabric/RCTSurfacePresenter.h
index 62d87be..624c849 100644
--- a/node_modules/react-native/React/Fabric/RCTSurfacePresenter.h
+++ b/node_modules/react-native/React/Fabric/RCTSurfacePresenter.h
@@ -19,6 +19,7 @@ NS_ASSUME_NONNULL_BEGIN
 @class RCTFabricSurface;
 @class RCTImageLoader;
 @class RCTMountingManager;
+@class RCTScheduler;
 
 /**
  * Coordinates presenting of React Native Surfaces and represents application
@@ -53,6 +54,7 @@ NS_ASSUME_NONNULL_BEGIN
 - (void)unregisterSurface:(RCTFabricSurface *)surface;
 
 @property (readonly) RCTMountingManager *mountingManager;
+@property (readonly, nullable) RCTScheduler *scheduler;
 
 - (nullable RCTFabricSurface *)surfaceForRootTag:(ReactTag)rootTag;
 
diff --git a/node_modules/react-native/React/Fabric/RCTSurfacePresenter.mm b/node_modules/react-native/React/Fabric/RCTSurfacePresenter.mm
index cc16148..2ee58d6 100644
--- a/node_modules/react-native/React/Fabric/RCTSurfacePresenter.mm
+++ b/node_modules/react-native/React/Fabric/RCTSurfacePresenter.mm
@@ -109,7 +109,7 @@ - (RCTMountingManager *)mountingManager
   return _mountingManager;
 }
 
-- (RCTScheduler *_Nullable)_scheduler
+- (RCTScheduler *_Nullable)scheduler
 {
   std::lock_guard<std::mutex> lock(_schedulerAccessMutex);
   return _scheduler;
@@ -145,7 +145,7 @@ - (void)setRuntimeExecutor:(RuntimeExecutor)runtimeExecutor
 - (void)registerSurface:(RCTFabricSurface *)surface
 {
   [_surfaceRegistry registerSurface:surface];
-  RCTScheduler *scheduler = [self _scheduler];
+  RCTScheduler *scheduler = [self scheduler];
   if (scheduler) {
     [scheduler registerSurface:surface.surfaceHandler];
   }
@@ -153,7 +153,7 @@ - (void)registerSurface:(RCTFabricSurface *)surface
 
 - (void)unregisterSurface:(RCTFabricSurface *)surface
 {
-  RCTScheduler *scheduler = [self _scheduler];
+  RCTScheduler *scheduler = [self scheduler];
   if (scheduler) {
     [scheduler unregisterSurface:surface.surfaceHandler];
   }
@@ -174,7 +174,7 @@ - (UIView *)findComponentViewWithTag_DO_NOT_USE_DEPRECATED:(NSInteger)tag
 
 - (BOOL)synchronouslyUpdateViewOnUIThread:(NSNumber *)reactTag props:(NSDictionary *)props
 {
-  RCTScheduler *scheduler = [self _scheduler];
+  RCTScheduler *scheduler = [self scheduler];
   if (!scheduler) {
     return NO;
   }
@@ -198,7 +198,7 @@ - (BOOL)synchronouslyUpdateViewOnUIThread:(NSNumber *)reactTag props:(NSDictiona
 
 - (void)setupAnimationDriverWithSurfaceHandler:(facebook::react::SurfaceHandler const &)surfaceHandler
 {
-  [[self _scheduler] setupAnimationDriver:surfaceHandler];
+  [[self scheduler] setupAnimationDriver:surfaceHandler];
 }
 
 - (BOOL)suspend
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/Binding.h b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/Binding.h
index db537ef..16cc5ef 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/Binding.h
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/Binding.h
@@ -43,6 +43,8 @@ class Binding : public jni::HybridClass<Binding>,
 
   static void registerNatives();
 
+  std::shared_ptr<Scheduler> getScheduler();
+
  private:
   void setConstraints(
       jint surfaceId,
@@ -133,7 +135,6 @@ class Binding : public jni::HybridClass<Binding>,
   std::shared_ptr<FabricMountingManager> mountingManager_;
   std::shared_ptr<Scheduler> scheduler_;
 
-  std::shared_ptr<Scheduler> getScheduler();
   std::shared_ptr<FabricMountingManager> verifyMountingManager(
       std::string const &locationHint);
 
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/JFabricUIManager.cpp b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/JFabricUIManager.cpp
new file mode 100644
index 0000000..595cccd
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/JFabricUIManager.cpp
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JFabricUIManager.h"
+
+namespace facebook::react {
+
+Binding *JFabricUIManager::getBinding() {
+  static const auto bindingField =
+      javaClassStatic()->getField<Binding::javaobject>("mBinding");
+
+  return getFieldValue(bindingField)->cthis();
+}
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/JFabricUIManager.h b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/JFabricUIManager.h
new file mode 100644
index 0000000..dffb099
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/jni/JFabricUIManager.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include "Binding.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+class JFabricUIManager : public JavaClass<JFabricUIManager> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/fabric/FabricUIManager;";
+
+  Binding *getBinding();
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.cpp b/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.cpp
index 615390b..34f68f4 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.cpp
@@ -36,6 +36,10 @@ EventDispatcher::EventDispatcher(
 
 void EventDispatcher::dispatchEvent(RawEvent &&rawEvent, EventPriority priority)
     const {
+  // Allows the event listener to interrupt default event dispatch
+  if (eventListeners_.willDispatchEvent(rawEvent)) {
+    return;
+  }
   getEventQueue(priority).enqueueEvent(std::move(rawEvent));
 }
 
@@ -46,6 +50,10 @@ void EventDispatcher::dispatchStateUpdate(
 }
 
 void EventDispatcher::dispatchUniqueEvent(RawEvent &&rawEvent) const {
+  // Allows the event listener to interrupt default event dispatch
+  if (eventListeners_.willDispatchEvent(rawEvent)) {
+    return;
+  }
   asynchronousBatchedQueue_->enqueueUniqueEvent(std::move(rawEvent));
 }
 
@@ -62,5 +70,18 @@ const EventQueue &EventDispatcher::getEventQueue(EventPriority priority) const {
   }
 }
 
+void EventDispatcher::addListener(
+    const std::shared_ptr<EventListener const> &listener) const {
+  eventListeners_.addListener(listener);
+}
+
+/*
+ * Removes provided event listener to the event dispatcher.
+ */
+void EventDispatcher::removeListener(
+    const std::shared_ptr<EventListener const> &listener) const {
+  eventListeners_.removeListener(listener);
+}
+
 } // namespace react
 } // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.h b/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.h
index 9b630b3..a0643ea 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/core/EventDispatcher.h
@@ -9,6 +9,7 @@
 
 #include <react/renderer/core/BatchedEventQueue.h>
 #include <react/renderer/core/EventBeat.h>
+#include <react/renderer/core/EventListener.h>
 #include <react/renderer/core/EventPriority.h>
 #include <react/renderer/core/EventQueueProcessor.h>
 #include <react/renderer/core/StateUpdate.h>
@@ -52,6 +53,18 @@ class EventDispatcher {
   void dispatchStateUpdate(StateUpdate &&stateUpdate, EventPriority priority)
       const;
 
+#pragma mark - Event listeners
+  /*
+   * Adds provided event listener to the event dispatcher.
+   */
+  void addListener(const std::shared_ptr<EventListener const> &listener) const;
+
+  /*
+   * Removes provided event listener to the event dispatcher.
+   */
+  void removeListener(
+      const std::shared_ptr<EventListener const> &listener) const;
+      
  private:
   EventQueue const &getEventQueue(EventPriority priority) const;
 
@@ -59,6 +72,8 @@ class EventDispatcher {
   std::unique_ptr<BatchedEventQueue> synchronousBatchedQueue_;
   std::unique_ptr<UnbatchedEventQueue> asynchronousUnbatchedQueue_;
   std::unique_ptr<BatchedEventQueue> asynchronousBatchedQueue_;
+
+  mutable EventListenerContainer eventListeners_;
 };
 
 } // namespace react
diff --git a/node_modules/react-native/ReactCommon/react/renderer/core/EventListener.cpp b/node_modules/react-native/ReactCommon/react/renderer/core/EventListener.cpp
new file mode 100644
index 0000000..48f5793
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/core/EventListener.cpp
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "EventListener.h"
+
+namespace facebook::react {
+
+bool EventListenerContainer::willDispatchEvent(const RawEvent &event) {
+  std::shared_lock<butter::shared_mutex> lock(mutex_);
+
+  bool handled = false;
+  for (auto const &listener : eventListeners_) {
+    handled = handled || listener->operator()(event);
+  }
+  return handled;
+}
+
+void EventListenerContainer::addListener(
+    const std::shared_ptr<EventListener const> &listener) {
+  std::unique_lock<butter::shared_mutex> lock(mutex_);
+
+  eventListeners_.push_back(listener);
+}
+
+void EventListenerContainer::removeListener(
+    const std::shared_ptr<EventListener const> &listener) {
+  std::unique_lock<butter::shared_mutex> lock(mutex_);
+
+  auto it = std::find(eventListeners_.begin(), eventListeners_.end(), listener);
+  if (it != eventListeners_.end()) {
+    eventListeners_.erase(it);
+  }
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactCommon/react/renderer/core/EventListener.h b/node_modules/react-native/ReactCommon/react/renderer/core/EventListener.h
new file mode 100644
index 0000000..f9176b5
--- /dev/null
+++ b/node_modules/react-native/ReactCommon/react/renderer/core/EventListener.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <string>
+
+#include <react/renderer/core/RawEvent.h>
+
+#include <butter/mutex.h>
+
+namespace facebook {
+namespace react {
+
+/**
+ * Listener for events dispatched to JS runtime.
+ * Return `true` to interrupt default dispatch to JS event emitter, `false` to
+ * pass through to default handlers.
+ */
+using EventListener = std::function<bool(const RawEvent &event)>;
+
+class EventListenerContainer {
+ public:
+  /*
+   * Invoke listeners in this container with the event.
+   * Returns true if event was handled by the listener, false to continue
+   * default dispatch.
+   */
+  bool willDispatchEvent(const RawEvent &event);
+
+  void addListener(const std::shared_ptr<EventListener const> &listener);
+  void removeListener(const std::shared_ptr<EventListener const> &listener);
+
+ private:
+  butter::shared_mutex mutex_;
+  std::vector<std::shared_ptr<EventListener const>> eventListeners_;
+};
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.cpp b/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.cpp
index 3a782a9..a6731f9 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.cpp
@@ -50,7 +50,24 @@ Scheduler::Scheduler(
   auto eventOwnerBox = std::make_shared<EventBeat::OwnerBox>();
   eventOwnerBox->owner = eventDispatcher_;
 
-  auto eventPipe = [uiManager](
+#ifdef ANDROID
+  auto enableCallImmediates = reactNativeConfig_->getBool(
+      "react_native_new_architecture:enable_call_immediates_android");
+#else
+  auto enableCallImmediates = reactNativeConfig_->getBool(
+      "react_native_new_architecture:enable_call_immediates_ios");
+#endif
+
+  auto weakRuntimeScheduler =
+      contextContainer_->find<std::weak_ptr<RuntimeScheduler>>(
+          "RuntimeScheduler");
+  auto runtimeScheduler =
+      (enableCallImmediates && weakRuntimeScheduler.has_value())
+      ? weakRuntimeScheduler.value().lock()
+      : nullptr;
+
+  auto eventPipe = [uiManager,
+                    runtimeScheduler = runtimeScheduler.get()](
                        jsi::Runtime &runtime,
                        const EventTarget *eventTarget,
                        const std::string &type,
@@ -351,5 +368,23 @@ ContextContainer::Shared Scheduler::getContextContainer() const {
   return contextContainer_;
 }
 
+std::shared_ptr<UIManager> Scheduler::getUIManager() const {
+  return uiManager_;
+}
+
+void Scheduler::addEventListener(
+    const std::shared_ptr<EventListener const> &listener) {
+  if (eventDispatcher_->has_value()) {
+    eventDispatcher_->value().addListener(listener);
+  }
+}
+
+void Scheduler::removeEventListener(
+    const std::shared_ptr<EventListener const> &listener) {
+  if (eventDispatcher_->has_value()) {
+    eventDispatcher_->value().removeListener(listener);
+  }
+}
+
 } // namespace react
 } // namespace facebook
diff --git a/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.h b/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.h
index 488a656..bfce80f 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/scheduler/Scheduler.h
@@ -16,6 +16,7 @@
 #include <react/renderer/components/root/RootComponentDescriptor.h>
 #include <react/renderer/core/ComponentDescriptor.h>
 #include <react/renderer/core/EventEmitter.h>
+#include <react/renderer/core/EventListener.h>
 #include <react/renderer/core/LayoutConstraints.h>
 #include <react/renderer/mounting/MountingOverrideDelegate.h>
 #include <react/renderer/scheduler/InspectorData.h>
@@ -107,6 +108,14 @@ class Scheduler final : public UIManagerDelegate {
 #pragma mark - ContextContainer
   ContextContainer::Shared getContextContainer() const;
 
+#pragma mark - UIManager
+  std::shared_ptr<UIManager> getUIManager() const;
+
+#pragma mark - Event listeners
+  void addEventListener(const std::shared_ptr<EventListener const> &listener);
+  void removeEventListener(
+      const std::shared_ptr<EventListener const> &listener);
+
  private:
   friend class SurfaceHandler;
 
diff --git a/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.cpp b/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.cpp
index 8455efb..fb955bc 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.cpp
@@ -22,6 +22,20 @@
 
 namespace facebook::react {
 
+ShadowNodeWrapper::~ShadowNodeWrapper() {
+  // implementation is kept empty as there is nothing necessary to do in destrutor
+  // however, it still needs to exist in order to act as a "key function" for
+  // the ShadowNodeWrapper class -- this allow for RTTI to work properly across
+  // the library boundaries (i.e. dynamic_cast that is used by isHostObject method)
+}
+
+ShadowNodeListWrapper::~ShadowNodeListWrapper() {
+  // implementation is kept empty as there is nothing necessary to do in destrutor
+  // however, it still needs to exist in order to act as a "key function" for
+  // the ShadowNodeListWrapper class -- this allow for RTTI to work properly across
+  // the library boundaries (i.e. dynamic_cast that is used by isHostObject method)
+}
+
 static std::unique_ptr<LeakChecker> constructLeakCheckerIfNeeded(
     RuntimeExecutor const &runtimeExecutor) {
 #ifdef REACT_NATIVE_DEBUG
diff --git a/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.h b/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.h
index 16553ad..6f9a616 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManager.h
@@ -111,14 +111,6 @@ class UIManager final : public ShadowTreeDelegate {
       RootShadowNode::Shared const &oldRootShadowNode,
       RootShadowNode::Unshared const &newRootShadowNode) const override;
 
- private:
-  friend class UIManagerBinding;
-  friend class Scheduler;
-  friend class SurfaceHandler;
-
-  // `TimelineController` needs to call private `getShadowTreeRegistry()`.
-  friend class TimelineController;
-
   ShadowNode::Shared createNode(
       Tag tag,
       std::string const &componentName,
@@ -174,6 +166,13 @@ class UIManager final : public ShadowTreeDelegate {
       const ShadowNode::Shared &shadowNode,
       std::string const &eventType);
 
+  ShadowTreeRegistry const &getShadowTreeRegistry() const;
+
+ private:
+  friend class UIManagerBinding;
+  friend class Scheduler;
+  friend class SurfaceHandler;
+
   /**
    * Configure a LayoutAnimation to happen on the next commit.
    * This API configures a global LayoutAnimation starting from the root node.
@@ -184,8 +183,6 @@ class UIManager final : public ShadowTreeDelegate {
       jsi::Value const &successCallback,
       jsi::Value const &failureCallback) const;
 
-  ShadowTreeRegistry const &getShadowTreeRegistry() const;
-
   SharedComponentDescriptorRegistry componentDescriptorRegistry_;
   UIManagerDelegate *delegate_;
   UIManagerAnimationDelegate *animationDelegate_{nullptr};
diff --git a/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManagerBinding.cpp b/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManagerBinding.cpp
index da6eeb6..2476c69 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManagerBinding.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/uimanager/UIManagerBinding.cpp
@@ -14,11 +14,14 @@
 #include <react/renderer/debug/SystraceSection.h>
 #include <react/renderer/runtimescheduler/RuntimeSchedulerBinding.h>
 #include <react/renderer/uimanager/primitives.h>
+#include <RNReanimated/ReanimatedUIManagerBinding.h>
 
 #include <utility>
 
 #include "bindingUtils.h"
 
+using namespace reanimated;
+
 namespace facebook::react {
 
 void UIManagerBinding::createAndInstallIfNeeded(
@@ -33,7 +36,7 @@ void UIManagerBinding::createAndInstallIfNeeded(
     // The global namespace does not have an instance of the binding;
     // we need to create, install and return it.
     auto uiManagerBinding =
-        std::make_shared<UIManagerBinding>(uiManager, runtimeExecutor);
+        std::make_shared<ReanimatedUIManagerBinding>(uiManager, runtimeExecutor, getNewestShadowNodesRegistry());
     auto object = jsi::Object::createFromHostObject(runtime, uiManagerBinding);
     runtime.global().setProperty(
         runtime, uiManagerModuleName, std::move(object));
diff --git a/node_modules/react-native/ReactCommon/react/renderer/uimanager/primitives.h b/node_modules/react-native/ReactCommon/react/renderer/uimanager/primitives.h
index 101155f..4212893 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/uimanager/primitives.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/uimanager/primitives.h
@@ -30,6 +30,10 @@ struct ShadowNodeWrapper : public jsi::HostObject {
   ShadowNodeWrapper(SharedShadowNode shadowNode)
       : shadowNode(std::move(shadowNode)) {}
 
+  // The below method needs to be out-of-line in order for the class to have
+  // at least one "key function" (see https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vague-vtable)
+  ~ShadowNodeWrapper() override;
+
   ShadowNode::Shared shadowNode;
 };
 
@@ -37,6 +41,10 @@ struct ShadowNodeListWrapper : public jsi::HostObject {
   ShadowNodeListWrapper(SharedShadowNodeUnsharedList shadowNodeList)
       : shadowNodeList(shadowNodeList) {}
 
+  // The below method needs to be out-of-line in order for the class to have
+  // at least one "key function" (see https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vague-vtable)
+  ~ShadowNodeListWrapper() override;
+
   SharedShadowNodeUnsharedList shadowNodeList;
 };
 
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..361f5fb
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
